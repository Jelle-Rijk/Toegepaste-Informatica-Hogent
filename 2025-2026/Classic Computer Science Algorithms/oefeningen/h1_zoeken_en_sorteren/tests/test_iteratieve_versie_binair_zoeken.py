import pytest
from h1_zoeken_en_sorteren.iteratieve_versie_binair_zoeken import zoek_binair

@pytest.mark.timeout(1)
@pytest.mark.parametrize("zoekItem, rij, verwachte_returnwaarde, verwachte_console_output", [
    (70, [0, 10, 20, 30, 40, 50, 60, 70, 80, 90], 7, 
     ("0, 9\n"
     "5, 9\n"
     "5, 7\n")),
    (65, [0, 10, 20, 30, 40, 50, 60, 70, 80, 90], -1, 
     ("0, 9\n"
      "5, 9\n"
      "5, 7\n")),
    (0, [0, 10, 20, 30, 40, 50, 60, 70, 80, 90], 0, 
     ("0, 9\n"
      "0, 4\n"
      "0, 2\n"
      "0, 1\n")),
    (90, [0, 10, 20, 30, 40, 50, 60, 70, 80, 90], 9, 
     ("0, 9\n"
      "5, 9\n"
      "8, 9\n")),
    (7, [1, 2, 3, 7, 7, 8, 16, 18, 21, 23, 23, 26, 26, 27, 28, 32, 33, 34, 36, 
      36, 38, 41, 45, 46, 47, 49, 51, 52, 52, 54, 59, 60, 61, 63, 63, 64, 72, 
      72, 77, 85, 88, 93, 95, 95, 97, 100, 106, 107, 111, 113, 113, 114, 115, 
      115, 117, 118, 119, 120, 121, 121, 123, 123, 126, 127, 127, 130, 132, 
      133, 134, 135, 135, 137, 138, 143, 145, 147, 149, 150, 151, 151, 152, 166, 
      167, 170, 171, 172, 175, 184, 191, 193, 195, 195, 203, 203, 204, 205, 206, 
      208, 209, 210, 211, 220, 220, 221, 222, 224, 225, 229, 229, 230, 235, 237, 
      240, 245, 245, 246, 246, 248, 249, 249, 251, 251, 255, 256, 256, 257, 260, 
      260, 261, 262, 264, 264, 264, 268, 271, 274, 275, 278, 280, 283, 283, 287, 
      290, 302, 311, 313, 315, 317, 317, 318, 318, 320, 327, 329, 332, 335, 336, 
      338, 340, 342, 343, 343, 346, 347, 347, 355, 355, 357, 359, 363, 363, 363, 
      369, 377, 379, 380, 380, 382, 385, 385, 387, 388, 389, 392, 394, 394, 395, 
      398, 399, 401, 401, 402, 403, 403, 404, 407, 411, 411, 413, 415, 417, 418, 
      419, 426, 427, 433, 434, 435, 437, 437, 439, 442, 449, 463, 464, 464, 464, 
      465, 469, 471, 477, 477, 479, 485, 487, 487, 488, 489, 490, 492, 492, 494, 
      498, 499, 502, 503, 503, 503, 503, 505, 506, 507, 510, 511, 519, 520,521, 
      523, 524, 528, 528, 530, 530, 531, 536, 541, 541, 550, 551, 554, 557, 560, 
      560, 563, 563, 565, 565, 566, 568, 572, 574, 575, 577, 578, 583, 585, 587, 
      591, 592, 593, 593, 595, 601, 604, 611, 612, 615, 615, 616, 616, 618, 619, 
      624, 628, 632, 635, 635, 637, 639, 639, 647, 650, 651, 654, 655, 659, 660, 
      660, 661, 662, 662, 663, 667, 671, 671, 671, 674, 675, 676, 677, 678, 678, 
      680, 684, 685, 685, 686, 687, 689, 689, 690, 695, 695, 697, 698, 700, 703, 
      704, 705, 705, 709, 709, 714, 716, 716, 719, 721, 723, 725, 728, 735, 735, 
      735, 736, 736, 738, 738, 738, 738, 739, 740, 741, 742, 748, 755, 755, 758, 
      759, 763, 764, 766, 768, 771, 772, 774, 775, 776, 777, 780, 780, 783, 785, 
      785, 786, 789, 791, 791, 791, 795, 795, 798, 800, 805, 807, 813, 816, 818, 
      819, 820, 822, 824, 824, 828, 829, 832, 835, 836, 837, 840, 840, 841, 846, 
      846, 847, 849, 850, 853, 854, 854, 855, 859, 860, 861, 861, 863, 863, 865, 
      868, 873, 875, 877, 880, 880, 883, 884, 885, 887, 889, 890, 890, 891, 892, 
      892, 895, 897, 898, 899, 905, 910, 911, 914, 915, 919, 921, 923, 924, 925, 
      926, 927, 928, 929, 933, 933, 935, 937, 938, 940, 941, 942, 943, 943, 944, 
      949, 956, 959, 960, 961, 964, 967, 968, 969, 973, 976, 979, 981, 981, 982, 
      984, 984, 984, 986, 987, 987, 991, 992, 992, 994, 999, 999, 999], 3,
      ("0, 499\n"
       "0, 249\n"
       "0, 124\n"
       "0, 62\n"
       "0, 31\n"
       "0, 15\n"
       "0, 7\n"
       "0, 3\n"
       "2, 3\n")),
    (999, [1, 2, 3, 7, 7, 8, 16, 18, 21, 23, 23, 26, 26, 27, 28, 32, 33, 34, 36,
      36, 38, 41, 45, 46, 47, 49, 51, 52, 52, 54, 59, 60, 61, 63, 63, 64, 72,
      72, 77, 85, 88, 93, 95, 95, 97, 100, 106, 107, 111, 113, 113, 114, 115,
      115, 117, 118, 119, 120, 121, 121, 123, 123, 126, 127, 127, 130, 132,
      133, 134, 135, 135, 137, 138, 143, 145, 147, 149, 150, 151, 151, 152,
      166, 167, 170, 171, 172, 175, 184, 191, 193, 195, 195, 203, 203, 204,
      205, 206, 208, 209, 210, 211, 220, 220, 221, 222, 224, 225, 229, 229,
      230, 235, 237, 240, 245, 245, 246, 246, 248, 249, 249, 251, 251, 255,
      256, 256, 257, 260, 260, 261, 262, 264, 264, 264, 268, 271, 274, 275,
      278, 280, 283, 283, 287, 290, 302, 311, 313, 315, 317, 317, 318, 318,
      320, 327, 329, 332, 335, 336, 338, 340, 342, 343, 343, 346, 347, 347,
      355, 355, 357, 359, 363, 363, 363, 369, 377, 379, 380, 380, 382, 385,
      385, 387, 388, 389, 392, 394, 394, 395, 398, 399, 401, 401, 402, 403,
      403, 404, 407, 411, 411, 413, 415, 417, 418, 419, 426, 427, 433, 434,
      435, 437, 437, 439, 442, 449, 463, 464, 464, 464, 465, 469, 471, 477,
      477, 479, 485, 487, 487, 488, 489, 490, 492, 492, 494, 498, 499, 502,
      503, 503, 503, 503, 505, 506, 507, 510, 511, 519, 520, 521, 523, 524,
      528, 528, 530, 530, 531, 536, 541, 541, 550, 551, 554, 557, 560, 560,
      563, 563, 565, 565, 566, 568, 572, 574, 575, 577, 578, 583, 585, 587,
      591, 592, 593, 593, 595, 601, 604, 611, 612, 615, 615, 616, 616, 618,
      619, 624, 628, 632, 635, 635, 637, 639, 639, 647, 650, 651, 654, 655,
      659, 660, 660, 661, 662, 662, 663, 667, 671, 671, 671, 674, 675, 676,
      677, 678, 678, 680, 684, 685, 685, 686, 687, 689, 689, 690, 695, 695,
      697, 698, 700, 703, 704, 705, 705, 709, 709, 714, 716, 716, 719, 721,
      723, 725, 728, 735, 735, 735, 736, 736, 738, 738, 738, 738, 739, 740,
      741, 742, 748, 755, 755, 758, 759, 763, 764, 766, 768, 771, 772, 774,
      775, 776, 777, 780, 780, 783, 785, 785, 786, 789, 791, 791, 791, 795,
      795, 798, 800, 805, 807, 813, 816, 818, 819, 820, 822, 824, 824, 828,
      829, 832, 835, 836, 837, 840, 840, 841, 846, 846, 847, 849, 850, 853,
      854, 854, 855, 859, 860, 861, 861, 863, 863, 865, 868, 873, 875, 877,
      880, 880, 883, 884, 885, 887, 889, 890, 890, 891, 892, 892, 895, 897,
      898, 899, 905, 910, 911, 914, 915, 919, 921, 923, 924, 925, 926, 927,
      928, 929, 933, 933, 935, 937, 938, 940, 941, 942, 943, 943, 944, 949,
      956, 959, 960, 961, 964, 967, 968, 969, 973, 976, 979, 981, 981, 982,
      984, 984, 984, 986, 987, 987, 991, 992, 992, 994, 999, 999, 999], 497,
      ("0, 499\n"
       "250, 499\n"
       "375, 499\n"
       "438, 499\n"
       "469, 499\n"
       "485, 499\n"
       "493, 499\n"
       "497, 499\n"
       "497, 498\n")),
    (4, [1, 2, 3, 7, 7, 8, 16, 18, 21, 23, 23, 26, 26, 27, 28, 32, 33, 34, 36,
      36, 38, 41, 45, 46, 47, 49, 51, 52, 52, 54, 59, 60, 61, 63, 63, 64, 72,
      72, 77, 85, 88, 93, 95, 95, 97, 100, 106, 107, 111, 113, 113, 114, 115,
      115, 117, 118, 119, 120, 121, 121, 123, 123, 126, 127, 127, 130, 132,
      133, 134, 135, 135, 137, 138, 143, 145, 147, 149, 150, 151, 151, 152,
      166, 167, 170, 171, 172, 175, 184, 191, 193, 195, 195, 203, 203, 204,
      205, 206, 208, 209, 210, 211, 220, 220, 221, 222, 224, 225, 229, 229,
      230, 235, 237, 240, 245, 245, 246, 246, 248, 249, 249, 251, 251, 255,
      256, 256, 257, 260, 260, 261, 262, 264, 264, 264, 268, 271, 274, 275,
      278, 280, 283, 283, 287, 290, 302, 311, 313, 315, 317, 317, 318, 318,
      320, 327, 329, 332, 335, 336, 338, 340, 342, 343, 343, 346, 347, 347,
      355, 355, 357, 359, 363, 363, 363, 369, 377, 379, 380, 380, 382, 385,
      385, 387, 388, 389, 392, 394, 394, 395, 398, 399, 401, 401, 402, 403,
      403, 404, 407, 411, 411, 413, 415, 417, 418, 419, 426, 427, 433, 434,
      435, 437, 437, 439, 442, 449, 463, 464, 464, 464, 465, 469, 471, 477,
      477, 479, 485, 487, 487, 488, 489, 490, 492, 492, 494, 498, 499, 502,
      503, 503, 503, 503, 505, 506, 507, 510, 511, 519, 520, 521, 523, 524,
      528, 528, 530, 530, 531, 536, 541, 541, 550, 551, 554, 557, 560, 560,
      563, 563, 565, 565, 566, 568, 572, 574, 575, 577, 578, 583, 585, 587,
      591, 592, 593, 593, 595, 601, 604, 611, 612, 615, 615, 616, 616, 618,
      619, 624, 628, 632, 635, 635, 637, 639, 639, 647, 650, 651, 654, 655,
      659, 660, 660, 661, 662, 662, 663, 667, 671, 671, 671, 674, 675, 676,
      677, 678, 678, 680, 684, 685, 685, 686, 687, 689, 689, 690, 695, 695,
      697, 698, 700, 703, 704, 705, 705, 709, 709, 714, 716, 716, 719, 721,
      723, 725, 728, 735, 735, 735, 736, 736, 738, 738, 738, 738, 739, 740,
      741, 742, 748, 755, 755, 758, 759, 763, 764, 766, 768, 771, 772, 774,
      775, 776, 777, 780, 780, 783, 785, 785, 786, 789, 791, 791, 791, 795,
      795, 798, 800, 805, 807, 813, 816, 818, 819, 820, 822, 824, 824, 828,
      829, 832, 835, 836, 837, 840, 840, 841, 846, 846, 847, 849, 850, 853,
      854, 854, 855, 859, 860, 861, 861, 863, 863, 865, 868, 873, 875, 877,
      880, 880, 883, 884, 885, 887, 889, 890, 890, 891, 892, 892, 895, 897,
      898, 899, 905, 910, 911, 914, 915, 919, 921, 923, 924, 925, 926, 927,
      928, 929, 933, 933, 935, 937, 938, 940, 941, 942, 943, 943, 944, 949,
      956, 959, 960, 961, 964, 967, 968, 969, 973, 976, 979, 981, 981, 982,
      984, 984, 984, 986, 987, 987, 991, 992, 992, 994, 999, 999, 999], -1,
      ("0, 499\n"
       "0, 249\n"
       "0, 124\n"
       "0, 62\n"
       "0, 31\n"
       "0, 15\n"
       "0, 7\n"
       "0, 3\n"
       "2, 3\n")),
])
def test_zoek_binair(capsys, zoekItem, rij, verwachte_returnwaarde, verwachte_console_output):
    result = zoek_binair(zoekItem, rij)
    captured = capsys.readouterr()  # vangt stdout/stderr output op
    assert result == verwachte_returnwaarde
    assert captured.out.strip() == verwachte_console_output.strip()
