import pytest
from h1_zoeken_en_sorteren.sorteren_door_selectie import selection_sort_vooraan

@pytest.mark.timeout(10)
@pytest.mark.parametrize("rij, expected_stdout", [
    ([], ""),                 # n=0 -> niets printen
    ([42], ""),               # n=1 -> niets printen

    # Klein: al gesorteerd
    ([1, 2, 3],
     "[1, 2, 3]\n"
     "[1, 2, 3]"),

    # Klein: omgekeerd
    ([3, 2, 1],
     "[1, 2, 3]\n"
     "[1, 2, 3]"),

    # Dubbels
    ([2, 1, 2, 1],
     "[1, 2, 2, 1]\n"
     "[1, 1, 2, 2]\n"
     "[1, 1, 2, 2]"),

    # Middellange rij, willekeurige volgorde
    ([44, 55, 12, 42, 94, 18, 6, 67],
     "[6, 55, 12, 42, 94, 18, 44, 67]\n"
     "[6, 12, 55, 42, 94, 18, 44, 67]\n"
     "[6, 12, 18, 42, 94, 55, 44, 67]\n"
     "[6, 12, 18, 42, 94, 55, 44, 67]\n"
     "[6, 12, 18, 42, 44, 55, 94, 67]\n"
     "[6, 12, 18, 42, 44, 55, 94, 67]\n"
     "[6, 12, 18, 42, 44, 55, 67, 94]"),

    # Middellange rij, omgekeerd gesorteerd
    ([10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
     "[1, 9, 8, 7, 6, 5, 4, 3, 2, 10]\n"
     "[1, 2, 8, 7, 6, 5, 4, 3, 9, 10]\n"
     "[1, 2, 3, 7, 6, 5, 4, 8, 9, 10]\n"
     "[1, 2, 3, 4, 6, 5, 7, 8, 9, 10]\n"
     "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
     "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
     "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
     "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
     "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"),

    # Lange rij, kleinste element al vooraan
    ([4, 5, 9, 8, 7, 12, 46, 59, 13, 43, 56, 100, 48, 789, 23, 456, 89, 10, 77, 600],
     "[4, 5, 9, 8, 7, 12, 46, 59, 13, 43, 56, 100, 48, 789, 23, 456, 89, 10, 77, 600]\n"
     "[4, 5, 9, 8, 7, 12, 46, 59, 13, 43, 56, 100, 48, 789, 23, 456, 89, 10, 77, 600]\n"
     "[4, 5, 7, 8, 9, 12, 46, 59, 13, 43, 56, 100, 48, 789, 23, 456, 89, 10, 77, 600]\n"
     "[4, 5, 7, 8, 9, 12, 46, 59, 13, 43, 56, 100, 48, 789, 23, 456, 89, 10, 77, 600]\n"
     "[4, 5, 7, 8, 9, 12, 46, 59, 13, 43, 56, 100, 48, 789, 23, 456, 89, 10, 77, 600]\n"
     "[4, 5, 7, 8, 9, 10, 46, 59, 13, 43, 56, 100, 48, 789, 23, 456, 89, 12, 77, 600]\n"
     "[4, 5, 7, 8, 9, 10, 12, 59, 13, 43, 56, 100, 48, 789, 23, 456, 89, 46, 77, 600]\n"
     "[4, 5, 7, 8, 9, 10, 12, 13, 59, 43, 56, 100, 48, 789, 23, 456, 89, 46, 77, 600]\n"
     "[4, 5, 7, 8, 9, 10, 12, 13, 23, 43, 56, 100, 48, 789, 59, 456, 89, 46, 77, 600]\n"
     "[4, 5, 7, 8, 9, 10, 12, 13, 23, 43, 56, 100, 48, 789, 59, 456, 89, 46, 77, 600]\n"
     "[4, 5, 7, 8, 9, 10, 12, 13, 23, 43, 46, 100, 48, 789, 59, 456, 89, 56, 77, 600]\n"
     "[4, 5, 7, 8, 9, 10, 12, 13, 23, 43, 46, 48, 100, 789, 59, 456, 89, 56, 77, 600]\n"
     "[4, 5, 7, 8, 9, 10, 12, 13, 23, 43, 46, 48, 56, 789, 59, 456, 89, 100, 77, 600]\n"
     "[4, 5, 7, 8, 9, 10, 12, 13, 23, 43, 46, 48, 56, 59, 789, 456, 89, 100, 77, 600]\n"
     "[4, 5, 7, 8, 9, 10, 12, 13, 23, 43, 46, 48, 56, 59, 77, 456, 89, 100, 789, 600]\n"
     "[4, 5, 7, 8, 9, 10, 12, 13, 23, 43, 46, 48, 56, 59, 77, 89, 456, 100, 789, 600]\n"
     "[4, 5, 7, 8, 9, 10, 12, 13, 23, 43, 46, 48, 56, 59, 77, 89, 100, 456, 789, 600]\n"
     "[4, 5, 7, 8, 9, 10, 12, 13, 23, 43, 46, 48, 56, 59, 77, 89, 100, 456, 789, 600]\n"
     "[4, 5, 7, 8, 9, 10, 12, 13, 23, 43, 46, 48, 56, 59, 77, 89, 100, 456, 600, 789]"),
])
def test_selection_sort_vooraan_console_output(capsys, rij, expected_stdout):
    selection_sort_vooraan(rij)
    captured = capsys.readouterr()
    assert captured.out.strip() == expected_stdout.strip()
